The following sequence of patches is based on these upstream commits:
https://github.com/curl/curl/commit/08b8ef4e726ba10f45081ecda5b3cea788d3c839
https://github.com/curl/curl/commit/620ea21410030a9977396b4661806bc187231b79
https://github.com/curl/curl/commit/5295e8d64ac6949ecb3f9e564317a608f51b90d8
https://github.com/curl/curl/commit/139a54ed0a172adaaf1a78d6f4fff50b2c3f9e08

It is further based on work by Kamil Dudka <kdudka@redhat.com> for
CentOS 8 and CentOS 9:
https://gitlab.com/redhat/centos-stream/rpms/curl/-/blob/c9s/0013-curl-7.76.1-CVE-2022-27774.patch
https://gitlab.com/redhat/centos-stream/rpms/curl/-/blob/c8s/0038-curl-7.61.1-CVE-2022-27774.patch


From cf98bd64b9949c50d4726eb26745c2f7fdf3a075 Mon Sep 17 00:00:00 2001
From: Daniel Stenberg <daniel@haxx.se>
Date: Mon, 25 Apr 2022 17:59:15 +0200
Subject: [PATCH 4/4] openssl: don't leak the SRP credentials in redirects
 either

Follow-up to 620ea21410030

Reported-by: Harry Sintonen
Closes #8751

Upstream-commit: 139a54ed0a172adaaf1a78d6f4fff50b2c3f9e08
Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 lib/http.c         |   10 +++++-----
 lib/http.h         |    6 ++++++
 lib/vtls/openssl.c |    3 ++-
 3 files changed, 13 insertions(+), 6 deletions(-)

--- a/lib/http.c
+++ b/lib/http.c
@@ -640,10 +640,10 @@
 }
 
 /*
- * allow_auth_to_host() tells if autentication, cookies or other "sensitive
- * data" can (still) be sent to this host.
+ * Curl_allow_auth_to_host() tells if authentication, cookies or other
+ * "sensitive data" can (still) be sent to this host.
  */
-static bool allow_auth_to_host(struct SessionHandle *data)
+bool Curl_allow_auth_to_host(struct SessionHandle *data)
 {
   struct connectdata *conn = data->easy_conn;
   return (!data->state.this_is_a_follow ||
@@ -724,7 +724,7 @@
 
   /* To prevent the user+password to get sent to other than the original host
      due to a location-follow */
-  if(allow_auth_to_host(data)
+  if(Curl_allow_auth_to_host(data)
      || conn->bits.netrc
     )
     result = output_auth_headers(conn, authhost, request, path, FALSE);
@@ -1636,7 +1636,7 @@
           else if(checkprefix("Authorization:", headers->data) &&
                   /* be careful of sending this potentially sensitive header to
                      other hosts */
-                  !allow_auth_to_host(data))
+                  !Curl_allow_auth_to_host(data))
             ;
           else {
             CURLcode result = Curl_add_bufferf(req_buffer, "%s\r\n",
--- a/lib/http.h
+++ b/lib/http.h
@@ -219,5 +219,11 @@
                       bool proxytunnel); /* TRUE if this is the request setting
                                             up the proxy tunnel */
 
+/*
+ * Curl_allow_auth_to_host() tells if authentication, cookies or other
+ * "sensitive data" can (still) be sent to this host.
+ */
+bool Curl_allow_auth_to_host(struct SessionHandle *data);
+
 #endif /* HEADER_CURL_HTTP_H */
 
--- a/lib/vtls/openssl.c
+++ b/lib/vtls/openssl.c
@@ -1761,7 +1761,8 @@
   }
 
 #ifdef USE_TLS_SRP
-  if(data->set.ssl.authtype == CURL_TLSAUTH_SRP) {
+  if((data->set.ssl.authtype == CURL_TLSAUTH_SRP) &&
+     Curl_allow_auth_to_host(data)) {
     infof(data, "Using TLS-SRP username: %s\n", data->set.ssl.username);
 
     if(!SSL_CTX_set_srp_username(connssl->ctx, data->set.ssl.username)) {
