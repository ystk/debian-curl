From: Markus Koschany <apo@debian.org>
Date: Sat, 8 Apr 2023 16:29:49 +0200
Subject: CVE-2023-27535

Origin: https://github.com/curl/curl/commit/8f4608468b890dce2dad9f91d5607ee7e9c1aba1
---
 lib/ftp.c     | 35 +++++++++++++++++++++++++++++++++--
 lib/ftp.h     |  5 +++++
 lib/url.c     | 37 ++++++++++++++++++++++++++++++++++++-
 lib/url.h     |  2 ++
 lib/urldata.h |  4 ++--
 5 files changed, 78 insertions(+), 5 deletions(-)

diff --git a/lib/ftp.c b/lib/ftp.c
index 2e5755e..c52ef26 100644
--- a/lib/ftp.c
+++ b/lib/ftp.c
@@ -4197,6 +4197,15 @@ static CURLcode ftp_disconnect(struct connectdata *conn, bool dead_connection)
     ftpc->server_os = NULL;
   }
 
+  if(ftpc->account) {
+    free(ftpc->account);
+    ftpc->account = NULL;
+  }
+  if(ftpc->alternative_to_user) {
+    free(ftpc->alternative_to_user);
+    ftpc->alternative_to_user = NULL;
+  }
+
   Curl_pp_disconnect(pp);
 
 #ifdef HAVE_GSSAPI
@@ -4513,6 +4522,7 @@ static CURLcode ftp_setup_connection(struct connectdata *conn)
   char *type;
   char command;
   struct FTP *ftp;
+  struct ftp_conn *ftpc = &conn->proto.ftpc;
 
   if(conn->bits.httpproxy && !data->set.tunnel_thru_httpproxy) {
     /* Unless we have asked to tunnel ftp operations through the proxy, we
@@ -4536,10 +4546,29 @@ static CURLcode ftp_setup_connection(struct connectdata *conn)
 #endif
   }
 
-  conn->data->req.protop = ftp = malloc(sizeof(struct FTP));
+  ftp = calloc(sizeof(struct FTP), 1);
   if(NULL == ftp)
     return CURLE_OUT_OF_MEMORY;
 
+  /* clone connection related data that is FTP specific */
+  if(data->set.str[STRING_FTP_ACCOUNT]) {
+    ftpc->account = strdup(data->set.str[STRING_FTP_ACCOUNT]);
+    if(!ftpc->account) {
+      free(ftp);
+      return CURLE_OUT_OF_MEMORY;
+    }
+  }
+  if(data->set.str[STRING_FTP_ALTERNATIVE_TO_USER]) {
+    ftpc->alternative_to_user =
+      strdup(data->set.str[STRING_FTP_ALTERNATIVE_TO_USER]);
+    if(!ftpc->alternative_to_user) {
+      Curl_safefree(ftpc->account);
+      free(ftp);
+      return CURLE_OUT_OF_MEMORY;
+    }
+  }
+  conn->data->req.protop = ftp;
+
   data->state.path++;   /* don't include the initial slash */
   data->state.slash_removed = TRUE; /* we've skipped the slash */
 
@@ -4588,7 +4617,9 @@ static CURLcode ftp_setup_connection(struct connectdata *conn)
   if(isBadFtpString(ftp->passwd))
     return CURLE_URL_MALFORMAT;
 
-  conn->proto.ftpc.known_filesize = -1; /* unknown size for now */
+  ftpc->known_filesize = -1; /* unknown size for now */
+  ftpc->use_ssl = data->set.use_ssl;
+  ftpc->ccc = data->set.ftp_ccc;
 
   return CURLE_OK;
 }
diff --git a/lib/ftp.h b/lib/ftp.h
index b6bfc02..2ee04bd 100644
--- a/lib/ftp.h
+++ b/lib/ftp.h
@@ -117,11 +117,16 @@ struct FTP {
    struct */
 struct ftp_conn {
   struct pingpong pp;
+  char *account;
+  char *alternative_to_user;
   char *entrypath; /* the PWD reply when we logged on */
   char **dirs;   /* realloc()ed array for path components */
   int dirdepth;  /* number of entries used in the 'dirs' array */
   int diralloc;  /* number of entries allocated for the 'dirs' array */
   char *file;    /* decoded file */
+  unsigned char use_ssl;   /* if AUTH TLS is to be attempted etc, for FTP or
+                              IMAP or POP3 or others! (type: curl_usessl)*/
+  unsigned char ccc;       /* ccc level for this connection */
   bool dont_check;  /* Set to TRUE to prevent the final (post-transfer)
                        file size and 226/250 status check. It should still
                        read the line, just ignore the result. */
diff --git a/lib/url.c b/lib/url.c
index 4e40a9f..f78d799 100644
--- a/lib/url.c
+++ b/lib/url.c
@@ -2142,7 +2142,7 @@ CURLcode Curl_setopt(struct SessionHandle *data, CURLoption option,
     /*
      * Make transfers attempt to use SSL/TLS.
      */
-    data->set.use_ssl = (curl_usessl)va_arg(param, long);
+    data->set.use_ssl = (unsigned char)va_arg(param, long);
     break;
 
   case CURLOPT_SSL_OPTIONS:
@@ -3204,6 +3204,19 @@ ConnectionExists(struct SessionHandle *data,
           match = TRUE;
         }
       }
+#ifndef CURL_DISABLE_FTP
+      if(needle->handler->protocol & PROTO_FAMILY_FTP) {
+        /* Also match ACCOUNT, ALTERNATIVE-TO-USER, USE_SSL and CCC options */
+        if(Curl_timestrcmp(needle->proto.ftpc.account,
+                           check->proto.ftpc.account) ||
+           Curl_timestrcmp(needle->proto.ftpc.alternative_to_user,
+                           check->proto.ftpc.alternative_to_user) ||
+           (needle->proto.ftpc.use_ssl != check->proto.ftpc.use_ssl) ||
+           (needle->proto.ftpc.ccc != check->proto.ftpc.ccc))
+          continue;
+      }
+#endif
+
 
       if(match) {
         /* If we are looking for an HTTP+NTLM connection, check if this is
@@ -6105,3 +6118,25 @@ CURLcode Curl_do_more(struct connectdata *conn, int *complete)
 
   return result;
 }
+
+/*
+ * Curl_timestrcmp() returns 0 if the two strings are identical. The time this
+ * function spends is a function of the shortest string, not of the contents.
+ */
+int Curl_timestrcmp(const char *a, const char *b)
+{
+  int match = 0;
+  int i = 0;
+
+  if(a && b) {
+    while(1) {
+      match |= a[i]^b[i];
+      if(!a[i] || !b[i])
+        break;
+      i++;
+    }
+  }
+  else
+    return a || b;
+  return match;
+}
diff --git a/lib/url.h b/lib/url.h
index 23b293d..1578d13 100644
--- a/lib/url.h
+++ b/lib/url.h
@@ -71,6 +71,8 @@ void Curl_close_connections(struct SessionHandle *data);
 
 const struct Curl_handler *Curl_builtin_scheme(const char *scheme);
 
+int Curl_timestrcmp(const char *first, const char *second);
+
 #define CURL_DEFAULT_PROXY_PORT 1080 /* default proxy port unless specified */
 #define CURL_DEFAULT_SOCKS5_GSSAPI_SERVICE "rcmd" /* default socks5 gssapi
                                                      service */
diff --git a/lib/urldata.h b/lib/urldata.h
index 4ef54ad..a006efc 100644
--- a/lib/urldata.h
+++ b/lib/urldata.h
@@ -1593,8 +1593,6 @@ struct UserDefined {
   bool ftp_use_eprt;     /* if EPRT is to be attempted or not */
   bool ftp_use_pret;     /* if PRET is to be used before PASV or not */
 
-  curl_usessl use_ssl;   /* if AUTH TLS is to be attempted etc, for FTP or
-                            IMAP or POP3 or others! */
   curl_ftpauth ftpsslauth; /* what AUTH XXX to be attempted */
   curl_ftpccc ftp_ccc;   /* FTP CCC options */
   bool no_signal;        /* do not use any signal/alarm handler */
@@ -1603,6 +1601,8 @@ struct UserDefined {
   bool ignorecl;         /* ignore content length */
   bool ftp_skip_ip;      /* skip the IP address the FTP server passes on to
                             us */
+  unsigned char use_ssl; /* if AUTH TLS is to be attempted etc, for FTP or
+                              IMAP or POP3 or others! (type: curl_usessl)*/
   bool connect_only;     /* make connection, let application use the socket */
   bool ssl_enable_beast; /* especially allow this flaw for interoperability's
                             sake*/
