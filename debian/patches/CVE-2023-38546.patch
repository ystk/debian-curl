From 61275672b46d9abb3285740467b882e22ed75da8 Mon Sep 17 00:00:00 2001
From: Daniel Stenberg <daniel@haxx.se>
Date: Thu, 14 Sep 2023 23:28:32 +0200
Subject: [PATCH] cookie: remove unnecessary struct fields

Plus: reduce the hash table size from 256 to 63. It seems unlikely to
make much of a speed difference for most use cases but saves 1.5KB of
data per instance.

Closes #11862

Backported by: Samuel Henrique <samueloph@debian.org>
Backported by: Emilio Pozuelo Monfort <pochu@debian.org>

---
 lib/cookie.c | 13 +------------
 lib/cookie.h | 13 ++++---------
 lib/easy.c   |  4 +---
 3 files changed, 6 insertions(+), 24 deletions(-)

--- a/lib/cookie.c
+++ b/lib/cookie.c
@@ -110,8 +110,6 @@ static void freecookie(struct Cookie *co
     free(co->value);
   if(co->maxage)
     free(co->maxage);
-  if(co->version)
-    free(co->version);
 
   free(co);
 }
@@ -654,11 +653,7 @@ Curl_cookie_add(struct Curl_easy *data,
           }
         }
         else if(Curl_raw_equal("version", name)) {
-          strstore(&co->version, whatptr);
-          if(!co->version) {
-            badcookie = TRUE;
-            break;
-          }
+          /* just ignore */
         }
         else if(Curl_raw_equal("max-age", name)) {
           /* Defined in RFC2109:
@@ -1039,8 +1034,6 @@ Curl_cookie_add(struct Curl_easy *data,
         if(clist->expirestr)
           free(clist->expirestr);
 
-        if(clist->version)
-          free(clist->version);
         if(clist->maxage)
           free(clist->maxage);
 
@@ -1133,7 +1127,6 @@ struct CookieInfo *Curl_cookie_init(stru
     c = calloc(1, sizeof(struct CookieInfo));
     if(!c)
       return NULL; /* failed to get memory */
-    c->filename = strdup(file?file:"none"); /* copy the name just in case */
   }
   else {
     /* we got an already existing one, use that */
@@ -1261,7 +1252,6 @@ static struct Cookie *dup_cookie(struct
     CLONE(name);
     CLONE(value);
     CLONE(maxage);
-    CLONE(version);
     dup->expires = src->expires;
     dup->tailmatch = src->tailmatch;
     dup->secure = src->secure;
@@ -1477,8 +1467,6 @@ void Curl_cookie_cleanup(struct CookieIn
   struct Cookie *co;
   struct Cookie *next;
   if(c) {
-    if(c->filename)
-      free(c->filename);
     Curl_cookie_freelist(c->cookies);
     free(c); /* free the base struct as well */
   }
--- a/lib/cookie.h
+++ b/lib/cookie.h
@@ -36,8 +36,6 @@ struct Cookie {
   char *expirestr;   /* the plain text version */
   bool tailmatch;    /* weather we do tail-matchning of the domain name */
 
-  /* RFC 2109 keywords. Version=1 means 2109-compliant cookie sending */
-  char *version;     /* Version = <value> */
   char *maxage;      /* Max-Age = <value> */
 
   bool secure;       /* whether the 'secure' keyword was used */
@@ -46,9 +44,8 @@ struct Cookie {
   /* linked list of cookies we know of */
   struct Cookie *cookies;
 
-  char *filename;  /* file we read from/write to */
   bool running;    /* state info, for cookie adding information */
-  long numcookies; /* number of cookies in the "jar" */
+  int numcookies;  /* number of cookies in the "jar" */
   bool newsession; /* new session, discard session cookies on load */
 };
 
--- a/lib/easy.c
+++ b/lib/easy.c
@@ -928,9 +928,7 @@ struct Curl_easy *curl_easy_duphandle(st
   if(data->cookies) {
     /* If cookies are enabled in the parent handle, we enable them
        in the clone as well! */
-    outcurl->cookies = Curl_cookie_init(data,
-                                        data->cookies->filename,
-                                        outcurl->cookies,
+    outcurl->cookies = Curl_cookie_init(data, NULL, outcurl->cookies,
                                         data->set.cookiesession);
     if(!outcurl->cookies)
       goto fail;
