From: Daniel Stenberg <daniel@haxx.se>
Date: Mon, 29 Aug 2022 00:09:17 +0200
Subject: cookie: reject cookies with "control bytes"
Origin: https://github.com/curl/curl/commit/8dfc93e573ca740544a2d79ebb0ed786592c65c3
Bug-Debian: https://bugs.debian.org/1018831
Bug-Debian-Security: https://security-tracker.debian.org/tracker/CVE-2022-35252

Rejects 0x01 - 0x1f (except 0x09) plus 0x7f

Reported-by: Axel Chong

Bug: https://curl.se/docs/CVE-2022-35252.html

CVE-2022-35252

Closes #9381
---
 lib/cookie.c |   29 +++++++++++++++++++++++++++++
 1 file changed, 29 insertions(+)

--- a/lib/cookie.c
+++ b/lib/cookie.c
@@ -294,6 +294,30 @@
 }
 
 /*
+  RFC 6265 section 4.1.1 says a server should accept this range:
+
+  cookie-octet    = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
+
+  But Firefox and Chrome as of June 2022 accept space, comma and double-quotes
+  fine. The prime reason for filtering out control bytes is that some HTTP
+  servers return 400 for requests that contain such.
+*/
+static int invalid_octets(const char *p)
+{
+  /* Reject all bytes \x01 - \x1f (*except* \x09, TAB) + \x7f */
+  static const char badoctets[] = {
+    "\x01\x02\x03\x04\x05\x06\x07\x08\x0a"
+    "\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14"
+    "\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x7f"
+  };
+  size_t vlen, len;
+  /* scan for all the octets that are *not* in cookie-octet */
+  len = strcspn(p, badoctets);
+  vlen = strlen(p);
+  return (len != vlen);
+}
+
+/*
  * remove_expired() removes expired cookies.
  */
 static void remove_expired(struct CookieInfo *cookies)
@@ -500,6 +524,11 @@
             infof(data, "skipped cookie with bad tailmatch domain: %s\n",
                   whatptr);
           }
+          if(invalid_octets(whatptr) || invalid_octets(name)) {
+            infof(data, "invalid octets in name/value, cookie dropped");
+            badcookie = TRUE;
+            break;
+          }
         }
         else if(Curl_raw_equal("version", name)) {
           strstore(&co->version, whatptr);
